name: Pipeline de CI/CD

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  verificaciones-calidad:
    name: Verificaciones de Calidad
    runs-on: ubuntu-latest

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar ESLint
        run: npm run lint

      - name: Ejecutar pruebas con cobertura
        run: npm run test:ci

      - name: Verificar formato de código con Prettier
        run: npm run prettier:check

      - name: Compilar aplicación
        run: npm run build:prod

      - name: Verificación completada ✅
        run: echo "Todas las verificaciones de calidad han pasado exitosamente"

  escaneo-seguridad:
    name: Escaneo de Seguridad
    runs-on: ubuntu-latest
    needs: verificaciones-calidad

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm ci

      - name: Auditoría de dependencias
        run: npm audit --audit-level=moderate

      - name: Escaneo de seguridad completado ✅
        run: echo "Escaneo de seguridad finalizado sin vulnerabilidades críticas"

  construccion-docker:
    name: Construcción de Docker
    runs-on: ubuntu-latest
    needs: [verificaciones-calidad, escaneo-seguridad]
    if: github.ref == 'refs/heads/master'
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Construir imagen de Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: product-catalog-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          push: false

      - name: Verificar imagen construida
        run: docker images

      - name: Guardar imagen en tar
        run: docker save product-catalog-frontend:latest -o image.tar

      - name: Escanear imagen de Docker con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'image.tar'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Subir resultados de escaneo a GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Construcción completada ✅
        run: echo "Imagen de Docker construida y escaneada exitosamente"